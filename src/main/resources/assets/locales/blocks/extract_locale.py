from pprint import pprint
import json
from pathlib import Path

assets_path = Path.home() / '.minecraft' / 'assets'


def main(version=None, locale=None, save=False):
    versions = {version.stem: version
                for version in (assets_path / 'indexes').iterdir()
                if version.is_file()}

    if version not in versions:
        version = choose_from(versions, default='1.19')

    index_file = json.load(versions[version].open())

    langs = {path.removeprefix('minecraft/lang/').removesuffix('.json'): value['hash']
             for path, value in index_file['objects'].items()
             if path.startswith('minecraft/lang/')}

    if locale not in langs:
        locale = choose_from(langs, default='en_au')

    lang_hash = langs[locale]
    lang_path = assets_path / 'objects' / lang_hash[:2] / lang_hash

    lang_file = json.load(lang_path.open())

    blocks = {key: block
              for key, block in lang_file.items()
              if key.startswith('block.minecraft.') and key.count('.') == 2}

    print(f"{locale=} {version=}")
    pprint(blocks)

    if save:
        save_path = Path.cwd() / (locale + ".yaml")
        yaml = (f"# Autogenerated by svinerus.buildTogether extract_locale.py script \n"
                f"# {locale=} {version=} \n") + \
                "\n".join((f"{key}: {name}" for key, name in blocks.items()))
        save_path.write_text(yaml)
        print(f"Saved to {save_path}")


def choose_from(li, default=None):
    while True:
        print("Choose from:\n", '\t'.join(li), sep='')
        i = input(f"-> [{default}]: ")
        if not i and default in li:
            return default
        if i in li:
            return i


if __name__ == '__main__':
    # main(version='1.19', locale='en_au', save=True)
    # main(version='1.19', locale='uk_ua', save=True)
    main(save=True)
